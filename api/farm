--------------------
--    Farm API    --
--------------------

-- Depends on T API
if not os.loadAPI("tapi") then
  error("Failed to load T API", -1)
end

-----------------
-- Constants
-----------------
FULLY_GROWN_META = 7

-----------------------
-- SeedCropPair class
-----------------------
SeedCropPair = {}

function SeedCropPair.new(self, seed, crop)
  obj = {}
  setmetatable(obj, self)
  self.__index = self
  obj.seed = seed
  obj.crop = crop
  return obj
end

function SeedCropPair.__tostring(self)
  return "(" .. tostring(self.seed) ..
    "," .. tostring(self.crop) .. ")"
end

--------------------
-- Farmer class
--------------------
Farmer = {}

function Farmer.new(self, rowLength,
  numSections)
  obj = {}
  setmetatable(obj, self)
  self.__index = self
  self.cropList = tapi.List:new()     
  self.rowLength = rowLength
  self.numSections = numSections
  return obj
end

function Farmer.addSeedCropPair(
  self, seed, crop)
  self.cropList:append(
    SeedCropPair:new(seed, crop)
  )
end

function Farmer.plant(self, seed)
  local slot = tapi.findItemByName(seed)
  if slot ~= tapi.INVALID_SLOT then
    turtle.select(slot)
    return turtle.placeDown()
  end
  return false
end

function Farmer.harvest(self, crop)
  local name = tapi.getBlockType("down")
  if name == nil then
    turtle.digDown()
    return true
  elseif name ~= crop then
    return false
  end
  local meta = tapi.getBlockMeta("down")
  if meta ~=  FULLY_GROWN_META then
    return false
  end
  
  return turtle.digDown()
end

function Farmer.tryHarvestPlant(self, 
  seed, crop)
  return  self:harvest(crop) and
    self:plant(seed)
end

function Farmer.tryHarvestPlantAll(self)
  local curr = self.cropList.head
  while curr ~= nil do 
    local success = self:tryHarvestPlant(
      curr.value.seed,
      curr.value.crop)
    if success then 
      return true
    end
    curr = curr.next 
  end
  return false
end

function Farmer.farmSingleRow(self, distance)
  local i 
  tapi.waitForFuel(distance)
  for i = 1, distance - 1, 1 do 
    self:tryHarvestPlantAll()
    turtle.forward()
  end
end  

function Farmer.farmSection(self, direction)
  self:farmSingleRow(self.rowLength)
  tapi.turn(direction)
  self:farmSingleRow(3)
  tapi.turn(direction)
  self:farmSingleRow(self.rowLength)
end

function Farmer.farmField(self, direction)
  local i 
  -- Farm first section
  self:farmSection(direction)  
  -- Farm remaining sections
  for i = 1, self.numSections - 1, 1 do
    local oppositeDirection =
      tapi.getOppositeDirection(direction)
    tapi.turn(oppositeDirection)
    self:farmSingleRow(2)
    tapi.turn(oppositeDirection)
    self:farmSection(direction)
  end

  -- Return to start
  tapi.turn(direction)
  self:farmSingleRow(3 * self.numSections)
  tapi.turn(direction)
end

