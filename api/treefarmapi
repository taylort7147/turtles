-------------------------
--    Tree Farm API    --
-------------------------

-- Depends on T API
if not os.loadAPI("api/tapi") then
  error("Failed to load T API", -1)
end

-----------------
-- Constants
-----------------
MAX_HEIGHT = 12
SAPLING = "minecraft:sapling"
WOOD = "minecraft:log"

----------------------
-- Static functions --
----------------------

function plantSapling(self)
  local slot = tapi.findItemByName(SAPLING)
  if slot ~= tapi.INVALID_SLOT then
    tapi.select(slot)
    return tapi.place()
  end
  return false
end

function harvestTree(self)
  if tapi.getBlockType("forward") ~= WOOD then
    error("No tree found.", tapi.RUNTIME_ERROR)
  end
  
  tapi.dig()
  tapi.forward()
  local height = 0
  while tapi.getBlockType("up") == WOOD and height < MAX_HEIGHT do
    tapi.digUp()
    tapi.up()
    height = height + 1    
  end
  while height > 0 do
    tapi.down()
    height = height - 1
  end
  tapi.back()
end

function tryHarvestTree(self)
  local status, err = pcall(harvestTree)
  if status == false then
    print(err)
  end
  return status, err
end


----------------------
-- TreeFarmer class --
----------------------
TreeFarmer = {}

function TreeFarmer.new(self, distBetweenTrees,
  numTreesInRow, numRows)
  obj = {}
  setmetatable(obj, self)
  self.__index = self  
  self.distBetweenTrees = distBetweenTrees
  self.numTreesInRow = numTreesInRow
  self.numRows = numRows
  return obj
end

-- Starting directly in front of the first tree in a row, 
-- harvest all trees in the row to the left or right.
function TreeFarmer.farmSingleRow(self, direction)
  local i, j
  local estimatedFuel = (self.distBetweenTrees + 1 + MAX_HEIGHT) * self.numTreesInRow
  local oppositeDirection = tapi.getOppositeDirection(direction)
  tapi.waitForFuel(estimatedFuel)
  tryHarvestTree()
  plantSapling()
  for i = 1, self.numTreesInRow - 1, 1 do 
    tapi.go(direction)
    tapi.forward(self.distBetweenTrees + 1)
    tapi.go(oppositeDirection)
    tryHarvestTree()
    plantSapling()
  end
end  

function TreeFarmer.farmSection(self, direction)
  self:farmSingleRow(self.rowLength)
  tapi.turn(direction)
  self:farmSingleRow(3)
  tapi.turn(direction)
  self:farmSingleRow(self.rowLength)
end

function TreeFarmer.farmField(self, direction)
  local i 
  -- Farm first section
  self:farmSection(direction)  
  -- Farm remaining sections
  for i = 1, self.numSections - 1, 1 do
    local oppositeDirection =
      tapi.getOppositeDirection(direction)
    tapi.turn(oppositeDirection)
    self:farmSingleRow(2)
    tapi.turn(oppositeDirection)
    self:farmSection(direction)
  end

  -- Return to start
  tapi.turn(direction)
  self:farmSingleRow(3 * self.numSections)
  tapi.turn(direction)
end

