assert(os.loadAPI("api/data_struct"), "Required API missing: data_struct")
local ds = data_struct
assert(os.loadAPI("api/test"), "Required API missing: test")


-- Stack
local function testStackSize()
  local s = ds.Stack:new()
  test.assertAreEqual(0, s:size())
  s:push(1)
  test.assertAreEqual(1, s:size())
  s:push(1)
  test.assertAreEqual(2, s:size())
  s:pop()
  s:pop()
  test.assertAreEqual(0, s:size())
  s:pop()
  test.assertAreEqual(0, s:size())
end

local function testStackPushPop()
  local s = ds.Stack:new()
  test.assertNil(s:pop())
  s:push(1)
  s:push("abc")
  s:push({k="v"})
  test.assertAreEqual("v", s:pop()["k"])
  s:push(999)
  test.assertAreEqual(999, s:pop())
  test.assertAreEqual("abc", s:pop())
  test.assertAreEqual(1, s:pop())
  test.assertNil(s:pop())
  s:push(5)
  test.assertAreEqual(5, s:pop())  
end

local function testStackEmpty()
  local s = ds.Stack:new()
  test.assertTrue(s:empty())
  s:push(1)
  test.assertFalse(s:empty())
  s:pop()
  test.assertTrue(s:empty())
end

local function testStackGetTable()
  local s = ds.Stack:new()
  s:push("a")
  s:push("b")
  s:push("c")
  local t = s:getTable()
  test.assertAreEqual("a", t[1])
  test.assertAreEqual("b", t[2])
  test.assertAreEqual("c", t[3])
  s:pop()
  s:pop()
  s:pop()
  test.assertTrue(s:empty())
  test.assertAreEqual(3, table.maxn(t))
end


-- Queue
local function testQueueSize()
  local q = ds.Queue:new()
  test.assertAreEqual(0, q:size())
  q:put(1)
  test.assertAreEqual(1, q:size())
  q:put(1)
  test.assertAreEqual(2, q:size())
  q:get()
  q:get()
  test.assertAreEqual(0, q:size())
  q:get()
  test.assertAreEqual(0, q:size())
end

local function testQueuePutGet()
  local q = ds.Queue:new()
  test.assertNil(q:get())
  q:put(1)
  q:put("abc")
  q:put({k="v"})
  test.assertAreEqual(1, q:get())
  q:put(999)
  test.assertAreEqual("abc", q:get())
  test.assertAreEqual("v", q:get()["k"])
  test.assertAreEqual(999, q:get())
  test.assertNil(q:get())
  q:put(5)
  test.assertAreEqual(5, q:get())  
end

local function testQueueEmpty()
  local q = ds.Queue:new()
  test.assertTrue(q:empty())
  q:put(1)
  test.assertFalse(q:empty())
  q:get()
  test.assertTrue(q:empty())
end

local function testQueueGetTable()
  local q = ds.Queue:new()
  q:put("a")
  q:put("b")
  q:put("c")
  local t = q:getTable()
  test.assertAreEqual("a", t[1])
  test.assertAreEqual("b", t[2])
  test.assertAreEqual("c", t[3])
  q:get()
  q:get()
  q:get()
  test.assertTrue(q:empty())
  test.assertAreEqual(3, table.maxn(t))
end

-- Run tests
print("Running Stack tests")
testStackSize()
testStackPushPop()
testStackEmpty()
testStackGetTable()

print("Running Queue tests")
testQueueSize()
testQueuePutGet()
testQueueEmpty()
testQueueGetTable()

print("Success")