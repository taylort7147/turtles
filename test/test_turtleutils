os.loadAPI("api/turtleutils")
os.loadAPI("api/test")
local tu = turtleutils


-- Constants
local VALID_ROUTINE_FILENAME = "test/test_files/valid_routine"

-- split
local function testSplitEmptyString()
  local str = ""
  local tokens = tu.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(0, table.maxn(tokens))
end

local function testSplitSpaceDefaultSep()
  local str = "abc 123"
  local tokens = tu.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(2, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123", tokens[2])
end

local function testSplitTabDefaultSep()
  local str = "abc\t123"
  local tokens = tu.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(2, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123", tokens[2])
end

local function testSplitNewlineDefaultSep()
  local str = "abc\n123"
  local tokens = tu.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(2, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123", tokens[2])
end

local function testSplitExtraWhitespaceDefaultSep()
  local str = "   \t  abc   123\t \t\n  nova   \n"
  local tokens = tu.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(3, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123", tokens[2])
  test.assertAreEqual("nova", tokens[3])
end

local function testSplitColonSep()
  local str = "abc:123 456:def"
  local tokens = tu.split(str, ":")
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(3, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123 456", tokens[2])
  test.assertAreEqual("def", tokens[3])
end


-- contains
local function testContainsEmptyTableNilValue()
  local t = {}
  local v = nil
  test.assertFalse(tu.contains(t, v))
end

local function testContainsEmptyTableNonNilValue()
  local t = {}
  local v = 0
  test.assertFalse(tu.contains(t, v))
end

local function testContainsValueExistsInTable()
  local t = {"abc"}
  local v = "abc"
  test.assertTrue(tu.contains(t, v))
end

local function testContainsNumericArrayContainsZero()
  local t = {1, 2, 3, 4, 5, 6, 7,8 ,9, 0}
  local v = 0
  test.assertTrue(tu.contains(t, v))
end

local function testContainsTableDoesNotContainValue()
  local t = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
  local v = 10
  test.assertFalse(tu.contains(t, v))
end


-- Stack
local function testStackSize()
  local s = tu.Stack:new()
  test.assertAreEqual(0, s:size())
  s:push(1)
  test.assertAreEqual(1, s:size())
  s:push(1)
  test.assertAreEqual(2, s:size())
  s:pop()
  s:pop()
  test.assertAreEqual(0, s:size())
  s:pop()
  test.assertAreEqual(0, s:size())
end

local function testStackPushPop()
  local s = tu.Stack:new()
  test.assertNil(s:pop())
  s:push(1)
  s:push("abc")
  s:push({k="v"})
  test.assertAreEqual("v", s:pop()["k"])
  s:push(999)
  test.assertAreEqual(999, s:pop())
  test.assertAreEqual("abc", s:pop())
  test.assertAreEqual(1, s:pop())
  test.assertNil(s:pop())
  s:push(5)
  test.assertAreEqual(5, s:pop())  
end

local function testStackEmpty()
  local s = tu.Stack:new()
  test.assertTrue(s:empty())
  s:push(1)
  test.assertFalse(s:empty())
  s:pop()
  test.assertTrue(s:empty())
end

local function testStackGetTable()
  local s = tu.Stack:new()
  s:push("a")
  s:push("b")
  s:push("c")
  local t = s:getTable()
  test.assertAreEqual("a", t[1])
  test.assertAreEqual("b", t[2])
  test.assertAreEqual("c", t[3])
  s:pop()
  s:pop()
  s:pop()
  test.assertTrue(s:empty())
  test.assertAreEqual(3, table.maxn(t))
end


-- Queue
local function testQueueSize()
  local q = tu.Queue:new()
  test.assertAreEqual(0, q:size())
  q:put(1)
  test.assertAreEqual(1, q:size())
  q:put(1)
  test.assertAreEqual(2, q:size())
  q:get()
  q:get()
  test.assertAreEqual(0, q:size())
  q:get()
  test.assertAreEqual(0, q:size())
end

local function testQueuePutGet()
  local q = tu.Queue:new()
  test.assertNil(q:get())
  q:put(1)
  q:put("abc")
  q:put({k="v"})
  test.assertAreEqual(1, q:get())
  q:put(999)
  test.assertAreEqual("abc", q:get())
  test.assertAreEqual("v", q:get()["k"])
  test.assertAreEqual(999, q:get())
  test.assertNil(q:get())
  q:put(5)
  test.assertAreEqual(5, q:get())  
end

local function testQueueEmpty()
  local q = tu.Queue:new()
  test.assertTrue(q:empty())
  q:put(1)
  test.assertFalse(q:empty())
  q:get()
  test.assertTrue(q:empty())
end

local function testQueueGetTable()
  local q = tu.Queue:new()
  q:put("a")
  q:put("b")
  q:put("c")
  local t = q:getTable()
  test.assertAreEqual("a", t[1])
  test.assertAreEqual("b", t[2])
  test.assertAreEqual("c", t[3])
  q:get()
  q:get()
  q:get()
  test.assertTrue(q:empty())
  test.assertAreEqual(3, table.maxn(t))
end



-- parseLine
local function testParseLineEmptyString()
  local str = ""
  local inst = tu.parseLine(str)
  test.assertNotNil(inst)
  test.assertAreEqual(tu.NopInstruction.Type, inst.Type)
  test.assertNil(inst.instruction)
  test.assertNil(inst.arg)
end

local function testParseLineTurtleInstructionNoArgs()
  local str = "back"
  local inst = tu.parseLine(str)
  test.assertNotNil(inst)
  test.assertAreEqual(tu.TurtleInstruction.Type, inst.Type)
  test.assertAreEqual("back", inst.instruction)
  test.assertNil(inst.arg)
end

local function testParseLineTurtleInstructionWithArgs()
  local str = "placeDown minecraft:sapling"
  local inst = tu.parseLine(str)
  test.assertNotNil(inst)
  test.assertAreEqual(tu.TurtleInstruction.Type, inst.Type)
  test.assertAreEqual("placeDown", inst.instruction)
  test.assertAreEqual("minecraft:sapling", inst.arg)
end

local function testParseLineControlInstruction()
  local str = "loop 9"
  local inst = tu.parseLine(str)
  test.assertNotNil(inst)
  test.assertAreEqual(tu.ControlInstruction.Type, inst.Type)
  test.assertAreEqual("loop", inst.instruction)
  test.assertAreEqual("9", inst.arg)
end


-- parseFile
local function testParseFileValidRoutine()
  local q = tu.parseFile(VALID_ROUTINE_FILENAME)
  test.assertNotNil(q)
  local inst = q:get()
  test.assertAreEqual("dig", inst.instruction)
  test.assertAreEqual(1, inst:getLineNumber())
  inst = q:get()
  test.assertAreEqual("left", inst.instruction)
  test.assertAreEqual(2, inst:getLineNumber())
  inst = q:get()
  test.assertAreEqual("forward", inst.instruction)
  test.assertAreEqual(3, inst:getLineNumber())
  inst = q:get()
  test.assertAreEqual("up", inst.instruction)
  test.assertAreEqual(4, inst:getLineNumber())
  inst = q:get()
  test.assertAreEqual("loop", inst.instruction)
  test.assertAreEqual("10", inst.arg)
  test.assertAreEqual(5, inst:getLineNumber())
  inst = q:get()
  test.assertAreEqual("back", inst.instruction)
  test.assertAreEqual(6, inst:getLineNumber())
  inst = q:get()
  test.assertAreEqual("loopend", inst.instruction)
  test.assertAreEqual(7, inst:getLineNumber())
end

-- compileInstructions
local function testCompileInstructionsHappyPath()
  local iq = tu.parseFile(VALID_ROUTINE_FILENAME)
  c = tu.compileInstructions(iq)
  
  test.assertAreEqual("dig", c[1].instruction)
  test.assertAreEqual("left", c[2].instruction)
  test.assertAreEqual("forward", c[3].instruction)
  test.assertAreEqual("up", c[4].instruction)
  test.assertAreEqual("back", c[5].instruction)
  test.assertAreEqual("jump", c[6].instruction)
  test.assertAreEqual(-1, c[6].arg)
end


-- Run tests
print("Running split() tests")
testSplitEmptyString()
testSplitSpaceDefaultSep()
testSplitTabDefaultSep()
testSplitNewlineDefaultSep()
testSplitExtraWhitespaceDefaultSep()
testSplitColonSep()

print("Running contains() tests")
testContainsEmptyTableNilValue()
testContainsEmptyTableNonNilValue()
testContainsValueExistsInTable()
testContainsNumericArrayContainsZero()
testContainsTableDoesNotContainValue()

print("Running Stack tests")
testStackSize()
testStackPushPop()
testStackEmpty()
testStackGetTable()

print("Running Queue tests")
testQueueSize()
testQueuePutGet()
testQueueEmpty()
testQueueGetTable()

print("Running parseLine() tests")
testParseLineEmptyString()
testParseLineTurtleInstructionNoArgs()
testParseLineTurtleInstructionWithArgs()
testParseLineControlInstruction()

print("Running parseFile() tests")
testParseFileValidRoutine()

print("Running compileInstructions() tests")
testCompileInstructionsHappyPath()


print("Success")