assert(os.loadAPI("api/util"), "Required API missing: util")
assert(os.loadAPI("api/test"), "Required API missing: test")

-- split
local function testSplitEmptyString()
  local str = ""
  local tokens = util.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(0, table.maxn(tokens))
end

local function testSplitSpaceDefaultSep()
  local str = "abc 123"
  local tokens = util.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(2, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123", tokens[2])
end

local function testSplitTabDefaultSep()
  local str = "abc\t123"
  local tokens = util.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(2, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123", tokens[2])
end

local function testSplitNewlineDefaultSep()
  local str = "abc\n123"
  local tokens = util.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(2, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123", tokens[2])
end

local function testSplitExtraWhitespaceDefaultSep()
  local str = "   \t  abc   123\t \t\n  nova   \n"
  local tokens = util.split(str)
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(3, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123", tokens[2])
  test.assertAreEqual("nova", tokens[3])
end

local function testSplitColonSep()
  local str = "abc:123 456:def"
  local tokens = util.split(str, ":")
  test.assertNotNil(tokens)
  test.assertAreEqual("table", type(tokens))
  test.assertAreEqual(3, table.maxn(tokens))
  test.assertAreEqual("abc", tokens[1])
  test.assertAreEqual("123 456", tokens[2])
  test.assertAreEqual("def", tokens[3])
end


-- contains
local function testContainsEmptyTableNilValue()
  local t = {}
  local v = nil
  test.assertFalse(util.contains(t, v))
end

local function testContainsEmptyTableNonNilValue()
  local t = {}
  local v = 0
  test.assertFalse(util.contains(t, v))
end

local function testContainsValueExistsInTable()
  local t = {"abc"}
  local v = "abc"
  test.assertTrue(util.contains(t, v))
end

local function testContainsNumericArrayContainsZero()
  local t = {1, 2, 3, 4, 5, 6, 7,8 ,9, 0}
  local v = 0
  test.assertTrue(util.contains(t, v))
end

local function testContainsTableDoesNotContainValue()
  local t = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
  local v = 10
  test.assertFalse(util.contains(t, v))
end

-- Run tests
print("Running split() tests")
testSplitEmptyString()
testSplitSpaceDefaultSep()
testSplitTabDefaultSep()
testSplitNewlineDefaultSep()
testSplitExtraWhitespaceDefaultSep()
testSplitColonSep()

print("Running contains() tests")
testContainsEmptyTableNilValue()
testContainsEmptyTableNonNilValue()
testContainsValueExistsInTable()
testContainsNumericArrayContainsZero()
testContainsTableDoesNotContainValue()

print("Success")